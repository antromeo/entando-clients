/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/antromeo/entando-clients/pkg/apis/entando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntandoKeycloakServerLister helps list EntandoKeycloakServers.
// All objects returned here must be treated as read-only.
type EntandoKeycloakServerLister interface {
	// List lists all EntandoKeycloakServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoKeycloakServer, err error)
	// EntandoKeycloakServers returns an object that can list and get EntandoKeycloakServers.
	EntandoKeycloakServers(namespace string) EntandoKeycloakServerNamespaceLister
	EntandoKeycloakServerListerExpansion
}

// entandoKeycloakServerLister implements the EntandoKeycloakServerLister interface.
type entandoKeycloakServerLister struct {
	indexer cache.Indexer
}

// NewEntandoKeycloakServerLister returns a new EntandoKeycloakServerLister.
func NewEntandoKeycloakServerLister(indexer cache.Indexer) EntandoKeycloakServerLister {
	return &entandoKeycloakServerLister{indexer: indexer}
}

// List lists all EntandoKeycloakServers in the indexer.
func (s *entandoKeycloakServerLister) List(selector labels.Selector) (ret []*v1.EntandoKeycloakServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoKeycloakServer))
	})
	return ret, err
}

// EntandoKeycloakServers returns an object that can list and get EntandoKeycloakServers.
func (s *entandoKeycloakServerLister) EntandoKeycloakServers(namespace string) EntandoKeycloakServerNamespaceLister {
	return entandoKeycloakServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntandoKeycloakServerNamespaceLister helps list and get EntandoKeycloakServers.
// All objects returned here must be treated as read-only.
type EntandoKeycloakServerNamespaceLister interface {
	// List lists all EntandoKeycloakServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoKeycloakServer, err error)
	// Get retrieves the EntandoKeycloakServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EntandoKeycloakServer, error)
	EntandoKeycloakServerNamespaceListerExpansion
}

// entandoKeycloakServerNamespaceLister implements the EntandoKeycloakServerNamespaceLister
// interface.
type entandoKeycloakServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EntandoKeycloakServers in the indexer for a given namespace.
func (s entandoKeycloakServerNamespaceLister) List(selector labels.Selector) (ret []*v1.EntandoKeycloakServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoKeycloakServer))
	})
	return ret, err
}

// Get retrieves the EntandoKeycloakServer from the indexer for a given namespace and name.
func (s entandoKeycloakServerNamespaceLister) Get(name string) (*v1.EntandoKeycloakServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("entandokeycloakserver"), name)
	}
	return obj.(*v1.EntandoKeycloakServer), nil
}
