/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/antromeo/entando-clients/pkg/apis/entando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntandoAppPluginLinkLister helps list EntandoAppPluginLinks.
// All objects returned here must be treated as read-only.
type EntandoAppPluginLinkLister interface {
	// List lists all EntandoAppPluginLinks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoAppPluginLink, err error)
	// EntandoAppPluginLinks returns an object that can list and get EntandoAppPluginLinks.
	EntandoAppPluginLinks(namespace string) EntandoAppPluginLinkNamespaceLister
	EntandoAppPluginLinkListerExpansion
}

// entandoAppPluginLinkLister implements the EntandoAppPluginLinkLister interface.
type entandoAppPluginLinkLister struct {
	indexer cache.Indexer
}

// NewEntandoAppPluginLinkLister returns a new EntandoAppPluginLinkLister.
func NewEntandoAppPluginLinkLister(indexer cache.Indexer) EntandoAppPluginLinkLister {
	return &entandoAppPluginLinkLister{indexer: indexer}
}

// List lists all EntandoAppPluginLinks in the indexer.
func (s *entandoAppPluginLinkLister) List(selector labels.Selector) (ret []*v1.EntandoAppPluginLink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoAppPluginLink))
	})
	return ret, err
}

// EntandoAppPluginLinks returns an object that can list and get EntandoAppPluginLinks.
func (s *entandoAppPluginLinkLister) EntandoAppPluginLinks(namespace string) EntandoAppPluginLinkNamespaceLister {
	return entandoAppPluginLinkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntandoAppPluginLinkNamespaceLister helps list and get EntandoAppPluginLinks.
// All objects returned here must be treated as read-only.
type EntandoAppPluginLinkNamespaceLister interface {
	// List lists all EntandoAppPluginLinks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoAppPluginLink, err error)
	// Get retrieves the EntandoAppPluginLink from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EntandoAppPluginLink, error)
	EntandoAppPluginLinkNamespaceListerExpansion
}

// entandoAppPluginLinkNamespaceLister implements the EntandoAppPluginLinkNamespaceLister
// interface.
type entandoAppPluginLinkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EntandoAppPluginLinks in the indexer for a given namespace.
func (s entandoAppPluginLinkNamespaceLister) List(selector labels.Selector) (ret []*v1.EntandoAppPluginLink, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoAppPluginLink))
	})
	return ret, err
}

// Get retrieves the EntandoAppPluginLink from the indexer for a given namespace and name.
func (s entandoAppPluginLinkNamespaceLister) Get(name string) (*v1.EntandoAppPluginLink, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("entandoapppluginlink"), name)
	}
	return obj.(*v1.EntandoAppPluginLink), nil
}
