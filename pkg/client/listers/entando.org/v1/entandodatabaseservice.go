/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/antromeo/entando-clients/pkg/apis/entando.org/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntandoDatabaseServiceLister helps list EntandoDatabaseServices.
// All objects returned here must be treated as read-only.
type EntandoDatabaseServiceLister interface {
	// List lists all EntandoDatabaseServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoDatabaseService, err error)
	// EntandoDatabaseServices returns an object that can list and get EntandoDatabaseServices.
	EntandoDatabaseServices(namespace string) EntandoDatabaseServiceNamespaceLister
	EntandoDatabaseServiceListerExpansion
}

// entandoDatabaseServiceLister implements the EntandoDatabaseServiceLister interface.
type entandoDatabaseServiceLister struct {
	indexer cache.Indexer
}

// NewEntandoDatabaseServiceLister returns a new EntandoDatabaseServiceLister.
func NewEntandoDatabaseServiceLister(indexer cache.Indexer) EntandoDatabaseServiceLister {
	return &entandoDatabaseServiceLister{indexer: indexer}
}

// List lists all EntandoDatabaseServices in the indexer.
func (s *entandoDatabaseServiceLister) List(selector labels.Selector) (ret []*v1.EntandoDatabaseService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoDatabaseService))
	})
	return ret, err
}

// EntandoDatabaseServices returns an object that can list and get EntandoDatabaseServices.
func (s *entandoDatabaseServiceLister) EntandoDatabaseServices(namespace string) EntandoDatabaseServiceNamespaceLister {
	return entandoDatabaseServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntandoDatabaseServiceNamespaceLister helps list and get EntandoDatabaseServices.
// All objects returned here must be treated as read-only.
type EntandoDatabaseServiceNamespaceLister interface {
	// List lists all EntandoDatabaseServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EntandoDatabaseService, err error)
	// Get retrieves the EntandoDatabaseService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EntandoDatabaseService, error)
	EntandoDatabaseServiceNamespaceListerExpansion
}

// entandoDatabaseServiceNamespaceLister implements the EntandoDatabaseServiceNamespaceLister
// interface.
type entandoDatabaseServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EntandoDatabaseServices in the indexer for a given namespace.
func (s entandoDatabaseServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.EntandoDatabaseService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EntandoDatabaseService))
	})
	return ret, err
}

// Get retrieves the EntandoDatabaseService from the indexer for a given namespace and name.
func (s entandoDatabaseServiceNamespaceLister) Get(name string) (*v1.EntandoDatabaseService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("entandodatabaseservice"), name)
	}
	return obj.(*v1.EntandoDatabaseService), nil
}
