/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/antromeo/entando-clients/pkg/apis/entando.org/v1"
)

// ProvidedCapabilitySpecApplyConfiguration represents an declarative configuration of the ProvidedCapabilitySpec type for use
// with apply.
type ProvidedCapabilitySpecApplyConfiguration struct {
	Capability                *string                                          `json:"capability,omitempty"`
	Implementation            *string                                          `json:"implementation,omitempty"`
	Scope                     *string                                          `json:"scope,omitempty"`
	ProvisioningStrategy      *string                                          `json:"provisioningStrategy,omitempty"`
	Selector                  *v1.SelectorSpec                                 `json:"selector,omitempty"`
	CapabilityParameters      *v1.CapabilityParameters                         `json:"capabilityParameters,omitempty"`
	SpecifiedCapability       *SpecifiedCapabilitySpecApplyConfiguration       `json:"specifiedCapability,omitempty"`
	ExternallyProvidedService *ExternallyProvidedServiceSpecApplyConfiguration `json:"externallyProvidedService,omitempty"`
}

// ProvidedCapabilitySpecApplyConfiguration constructs an declarative configuration of the ProvidedCapabilitySpec type for use with
// apply.
func ProvidedCapabilitySpec() *ProvidedCapabilitySpecApplyConfiguration {
	return &ProvidedCapabilitySpecApplyConfiguration{}
}

// WithCapability sets the Capability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Capability field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithCapability(value string) *ProvidedCapabilitySpecApplyConfiguration {
	b.Capability = &value
	return b
}

// WithImplementation sets the Implementation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Implementation field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithImplementation(value string) *ProvidedCapabilitySpecApplyConfiguration {
	b.Implementation = &value
	return b
}

// WithScope sets the Scope field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Scope field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithScope(value string) *ProvidedCapabilitySpecApplyConfiguration {
	b.Scope = &value
	return b
}

// WithProvisioningStrategy sets the ProvisioningStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProvisioningStrategy field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithProvisioningStrategy(value string) *ProvidedCapabilitySpecApplyConfiguration {
	b.ProvisioningStrategy = &value
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithSelector(value v1.SelectorSpec) *ProvidedCapabilitySpecApplyConfiguration {
	b.Selector = &value
	return b
}

// WithCapabilityParameters sets the CapabilityParameters field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CapabilityParameters field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithCapabilityParameters(value v1.CapabilityParameters) *ProvidedCapabilitySpecApplyConfiguration {
	b.CapabilityParameters = &value
	return b
}

// WithSpecifiedCapability sets the SpecifiedCapability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SpecifiedCapability field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithSpecifiedCapability(value *SpecifiedCapabilitySpecApplyConfiguration) *ProvidedCapabilitySpecApplyConfiguration {
	b.SpecifiedCapability = value
	return b
}

// WithExternallyProvidedService sets the ExternallyProvidedService field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternallyProvidedService field is set to the value of the last call.
func (b *ProvidedCapabilitySpecApplyConfiguration) WithExternallyProvidedService(value *ExternallyProvidedServiceSpecApplyConfiguration) *ProvidedCapabilitySpecApplyConfiguration {
	b.ExternallyProvidedService = value
	return b
}
