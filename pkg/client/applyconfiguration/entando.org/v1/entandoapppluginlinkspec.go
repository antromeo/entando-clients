/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// EntandoAppPluginLinkSpecApplyConfiguration represents an declarative configuration of the EntandoAppPluginLinkSpec type for use
// with apply.
type EntandoAppPluginLinkSpecApplyConfiguration struct {
	EntandoAppName         *string `json:"entandoAppName,omitempty"`
	EntandoAppNamespace    *string `json:"entandoAppNamespace,omitempty"`
	EntandoPluginName      *string `json:"entandoPluginName,omitempty"`
	EntandoPluginNamespace *string `json:"entandoPluginNamespace,omitempty"`
	TenantCode             *string `json:"tenantCode,omitempty"`
}

// EntandoAppPluginLinkSpecApplyConfiguration constructs an declarative configuration of the EntandoAppPluginLinkSpec type for use with
// apply.
func EntandoAppPluginLinkSpec() *EntandoAppPluginLinkSpecApplyConfiguration {
	return &EntandoAppPluginLinkSpecApplyConfiguration{}
}

// WithEntandoAppName sets the EntandoAppName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntandoAppName field is set to the value of the last call.
func (b *EntandoAppPluginLinkSpecApplyConfiguration) WithEntandoAppName(value string) *EntandoAppPluginLinkSpecApplyConfiguration {
	b.EntandoAppName = &value
	return b
}

// WithEntandoAppNamespace sets the EntandoAppNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntandoAppNamespace field is set to the value of the last call.
func (b *EntandoAppPluginLinkSpecApplyConfiguration) WithEntandoAppNamespace(value string) *EntandoAppPluginLinkSpecApplyConfiguration {
	b.EntandoAppNamespace = &value
	return b
}

// WithEntandoPluginName sets the EntandoPluginName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntandoPluginName field is set to the value of the last call.
func (b *EntandoAppPluginLinkSpecApplyConfiguration) WithEntandoPluginName(value string) *EntandoAppPluginLinkSpecApplyConfiguration {
	b.EntandoPluginName = &value
	return b
}

// WithEntandoPluginNamespace sets the EntandoPluginNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EntandoPluginNamespace field is set to the value of the last call.
func (b *EntandoAppPluginLinkSpecApplyConfiguration) WithEntandoPluginNamespace(value string) *EntandoAppPluginLinkSpecApplyConfiguration {
	b.EntandoPluginNamespace = &value
	return b
}

// WithTenantCode sets the TenantCode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TenantCode field is set to the value of the last call.
func (b *EntandoAppPluginLinkSpecApplyConfiguration) WithTenantCode(value string) *EntandoAppPluginLinkSpecApplyConfiguration {
	b.TenantCode = &value
	return b
}
